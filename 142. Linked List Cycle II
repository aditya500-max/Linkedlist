//Excellent torotoise and hare approach to find node where cycle starts
https://leetcode.com/problems/linked-list-cycle-ii/editorial/

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
         if(head==NULL || head->next==NULL){
            return NULL;
        }
        ListNode* fast=head;
        ListNode* slow=head;
        bool hasCycle=false;
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        
        if(fast==slow){
            hasCycle=true;
            break;

        }
        }
        if(!hasCycle){
            return NULL;
        }
        ListNode* temp=head;
        while(temp!=slow){
            temp=temp->next;
            slow=slow->next;
        }
        return temp;
    }
};
//Excellent set solution:
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ios::sync_with_stdio(0);
        
         if(head==NULL || head->next==NULL){
            return NULL;
        }
        ListNode* temp=head;
        unordered_set<ListNode*>st;
        while(temp!=NULL){
            if(st.find(temp)!=st.end()){
                return temp;
            }
            else{
                st.insert(temp);
                temp=temp->next;
            }
        }
        return NULL;
    }
};
