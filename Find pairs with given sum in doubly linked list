//hashing
#include<bits/stdc++.h>
vector<pair<int, int>> findPairs(Node* head, int k)
{
    Node* temp=head;
    unordered_map<int,int> mp;
    vector<pair<int, int>> ans;
    while(temp!=NULL){
        int t=k-(temp->data);
        if(mp.find(t)!=mp.end()){
             ans.push_back({t,temp->data});
        }
        else{
            mp.insert({temp->data,1});
        }
        temp=temp->next;
    }
    return ans;

}
//most optimal// 2 pointers since alredy sorted
/**
 * Definition of doubly linked list:
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this -> data = data;
 *          this -> prev = prev;
 *          this -> next = next;
 *      }
 * };
 *
 *************************************************************************/

vector<pair<int, int>> findPairs(Node* head, int k)
{
    vector<pair<int, int>> ans;
    Node* start = head;
     Node* end = head;
     while(end->next!=NULL){
         end=end->next;
     }
     while(start->data<end->data){
         int sum=start->data+end->data;
         if(sum==k){
             ans.push_back({start->data,end->data});
             start=start->next;
             end=end->prev;
                          

         }
        else if(sum<k){
             start=start->next;
             
         }
         else{
             end=end->prev;
         }
     }
   
   
    return ans;
}


















    


