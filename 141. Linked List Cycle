//Tortoise and hare approach  or fast and slow pointer(Floyd's cycle-finding algorithm)
//we move fast and slow pointer such that unless they met each other, they will definitely meet..proof:
suppose d is the distance between slow pointer and fast pointer. Also slow pointer is ahead of fast because fast completed the cycle and was redirected to some inner node.

At each step, slow moves 1 ahead and fast moves 2. The distance between them decreases by 1 each iteration. So they have to meet after some finite iterations.

https://leetcode.com/problems/linked-list-cycle/solutions/1829489/c-easy-to-understand-2-pointer-fast-slow/

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL){
            return false;
        }
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        
        if(fast==slow){
            return true;
        }
        }
        return false;
    }
};
