/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
//Most optimal
//fast and slow pointer //O(N/2) [[1 pass]]
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        ios::sync_with_stdio(0);
        cin.tie(0); 
        cout.tie(0);
        if(head->next==NULL){
            return  NULL;
        }
        ListNode* slow= head;
        ListNode* fast=head;
        ListNode* prev=head;
        while(fast!=NULL&& fast->next!=NULL){
            fast=fast->next->next;
            prev=slow;
            slow=slow->next;
        }
        prev->next=slow->next;
        slow->next=NULL;
        delete(slow);
        return head;
        
    }
};
