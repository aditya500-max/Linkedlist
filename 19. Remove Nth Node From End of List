/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int cnt=1;
        ListNode* temp=head;
         ListNode* prev=head;
        while(temp->next!=NULL){
            temp=temp->next;
            cnt++;
        }
        temp=head;
        if(cnt==n){
            temp=head;
            head=head->next;
            temp->next=NULL;
            delete temp;
            return head;
        }
        int f=cnt-n+1;
        
        for(int i=0;i<f-1;i++){
           prev=temp;
           temp=temp->next;
        }
        prev->next=temp->next;
           temp->next=NULL;
        delete temp;
        return head;
    }
};
Method 2 optimal ( 2pointer approach ) excellent approach;
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        cout.tie(0);
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* prev=head;
        for(int i=1;i<n;i++){
            fast=fast->next;
        }
        if(head->next==NULL){
            return NULL;
        }
        if(fast->next==NULL){
            return head->next;
        }

        while(fast->next!=NULL){
            fast=fast->next;
            prev=slow;
            slow=slow->next;
        }
        
        if(slow->next==NULL){
            prev->next=NULL;
            return head;
        }
        prev->next=slow->next;
        slow->next=NULL;
        return head;
        
    }
};
